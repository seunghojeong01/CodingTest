3.총총이는 친구 곰곰이의 소개로 제2회 곰곰컵에 출연할 기회를 얻었다!
총총이는 자신의 묘기인 무지개 댄스를 선보여, 여러분의 환심을 사려 한다. 이 댄스는 중독성이 강하기 때문에, 한번 보게 된 사람은 모두 따라 하게 돼버린다.
무지개 댄스를 추는 총총 2마리 사람들이 만난 기록이 시간 순서대로 N개 주어진다. (총총이는 토끼이지만 이 문제에서는 편의상 사람이라고 가정한다.)
무지개 댄스를 추지 않고 있던 사람이 무지개 댄스를 추고 있던 사람을 만나게 된다면, 만난 시점 이후로 무지개 댄스를 추게 된다.
기록이 시작되기 이전 무지개 댄스를 추고 있는 사람은 총총이 뿐이라고 할 때, 마지막 기록 이후 무지개 댄스를 추는 사람이 몇 명인지 구해보자!

입력
첫번째 줄에는 사람들이 만난 기록의 수
$N\ (1 <= N <= 1000)이 주어진다.

두번째 줄부터 N개의 줄에 걸쳐 사람들이 만난 기록이 주어진다.
i + 1번째 줄에는 i번째로 만난 사람들의 이름 A_i와 B_i가 공백을 사이에 두고 주어진다.
A_i와 B_i는 숫자와 영문 대소문자로 이루어진 최대 길이 20의 문자열이며, 서로 같지 않다.

총총이의 이름은 ChongChong으로 주어지며, 기록에서 1회 이상 주어진다.
동명이인은 없으며, 사람의 이름은 대소문자를 구분한다. (ChongChong과 chongchong은 다른 이름이다.)

출력
마지막 기록 이후 무지개 댄스를 추는 사람의 수를 출력하라.
1)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N=Integer.parseInt(br.readLine());
        HashSet<String> set=new HashSet<String>();
        for(int i=0;i<N;i++) {
        	StringTokenizer st=new StringTokenizer(br.readLine());
        	String name1=st.nextToken();
        	String name2=st.nextToken();
        	if(name1.equals("ChongChong") || name2.equals("ChongChong")) {
        		set.add(name1);
        		set.add(name2);
        	}
        	if(set.contains(name1)) {
        		set.add(name2);
        	}
        	if(set.contains(name2)) {
        		set.add(name1);
        	}
        }
        bw.write(set.size()+"");
        bw.flush();
        bw.close();
        br.close();
    }

}


4.수를 처리하는 것은 통계학에서 상당히 중요한 일이다. 통계학에서 N개의 수를 대표하는 기본 통계값에는 다음과 같은 것들이 있다. 단, N은 홀수라고 가정하자.

산술평균 : N개의 수들의 합을 N으로 나눈 값
중앙값 : N개의 수들을 증가하는 순서로 나열했을 경우 그 중앙에 위치하는 값
최빈값 : N개의 수들 중 가장 많이 나타나는 값
범위 : N개의 수들 중 최댓값과 최솟값의 차이
N개의 수가 주어졌을 때, 네 가지 기본 통계값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 단, N은 홀수이다. 그 다음 N개의 줄에는 정수들이 주어진다. 입력되는 정수의 절댓값은 4,000을 넘지 않는다.

출력
첫째 줄에는 산술평균을 출력한다. 소수점 이하 첫째 자리에서 반올림한 값을 출력한다.
둘째 줄에는 중앙값을 출력한다.
셋째 줄에는 최빈값을 출력한다. 여러 개 있을 때에는 최빈값 중 두 번째로 작은 값을 출력한다.
넷째 줄에는 범위를 출력한다.
1)평균값에 double 안넣어서 고생했네;;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N=Integer.parseInt(br.readLine());
        int arr[]=new int[N];
        int sum=0;
        StringBuilder result=new StringBuilder();
        for(int i=0;i<N;i++) {
        	arr[i]=Integer.parseInt(br.readLine());
        	sum+=arr[i];
        }
        Arrays.sort(arr);
        //1
        result.append(Math.round((double)sum/N)+"\n");
       
        //2
        result.append(arr[N/2]+"\n");
        //3
        HashMap<Integer, Integer> Map= new HashMap<Integer, Integer>();
        for(int a:arr) {
        	Map.put(a, Map.getOrDefault(a, 0)+1);
        }
        int max=0;
        for (HashMap.Entry<Integer, Integer> entry : Map.entrySet()) {
            max=Math.max(max, entry.getValue());
        }
        
        ArrayList<Integer> mapKey=new ArrayList<Integer>();
        
        for(HashMap.Entry<Integer, Integer> entry:Map.entrySet()) {
        	if(entry.getValue()==max) {
        		mapKey.add(entry.getKey());
        	}
        }
        if(mapKey.size()==1) {
        	result.append(mapKey.get(0)).append("\n");
        }else {
        	Collections.sort(mapKey);
        	result.append(mapKey.get(1)+"\n");
        }
        //4
        result.append(arr[N-1]-arr[0]);
        bw.write(result.toString());
        bw.flush();
        bw.close();
        br.close();
    }
}




