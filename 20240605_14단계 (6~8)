6.김진영이 듣도 못한 사람의 명단과, 보도 못한 사람의 명단이 주어질 때, 듣도 보도 못한 사람의 명단을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 듣도 못한 사람의 수 N, 보도 못한 사람의 수 M이 주어진다. 이어서 둘째 줄부터 N개의 줄에 걸쳐 듣도 못한 사람의 이름과, N+2째 줄부터 보도 못한 사람의 이름이 순서대로 주어진다.
이름은 띄어쓰기 없이 알파벳 소문자로만 이루어지며, 그 길이는 20 이하이다. N, M은 500,000 이하의 자연수이다.
듣도 못한 사람의 명단에는 중복되는 이름이 없으며, 보도 못한 사람의 명단도 마찬가지이다.

출력
듣보잡의 수와 그 명단을 사전순으로 출력한다.

//HashSet으로 푸는게 더 좋을듯?
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st=new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        HashMap<String,Integer > map=new HashMap<String,Integer>();
        for(int i=0;i<N;i++) {
        	map.put( br.readLine(),1);
        }
        int count=0;
        ArrayList<String> arr=new ArrayList<String>();
        for(int i=0;i<M;i++) {
        	String S=br.readLine();
        	if(map.containsKey(S)) {
        		arr.add(S);
        		count++;
        	}
        }
        Collections.sort(arr);
        bw.write(count+"\n");
        for(String ar:arr) {
        	bw.write(ar+"\n");
        }
        bw.flush();
        bw.close();
        br.close();
    }
}

7.자연수를 원소로 갖는 공집합이 아닌 두 집합 A와 B가 있다. 이때, 두 집합의 대칭 차집합의 원소의 개수를 출력하는 프로그램을 작성하시오. 
두 집합 A와 B가 있을 때, (A-B)와 (B-A)의 합집합을 A와 B의 대칭 차집합이라고 한다.
예를 들어, A = { 1, 2, 4 } 이고, B = { 2, 3, 4, 5, 6 } 라고 할 때,  A-B = { 1 } 이고, B-A = { 3, 5, 6 } 이므로, 대칭 차집합의 원소의 개수는 1 + 3 = 4개이다.

입력
첫째 줄에 집합 A의 원소의 개수와 집합 B의 원소의 개수가 빈 칸을 사이에 두고 주어진다. 둘째 줄에는 집합 A의 모든 원소가,
셋째 줄에는 집합 B의 모든 원소가 빈 칸을 사이에 두고 각각 주어진다. 각 집합의 원소의 개수는 200,000을 넘지 않으며, 모든 원소의 값은 100,000,000을 넘지 않는다.

출력
첫째 줄에 대칭 차집합의 원소의 개수를 출력한다.
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st=new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        HashSet<Integer> set1=new HashSet<Integer>();
        HashSet<Integer> set2=new HashSet<Integer>();
        st=new StringTokenizer(br.readLine());
        for(int i=0;i<N;i++) {
        	int a=Integer.parseInt(st.nextToken());
        	set1.add(a);
        }
        st=new StringTokenizer(br.readLine());
        for(int i=0;i<M;i++) {
        	int a=Integer.parseInt(st.nextToken());
        	set2.add(a);
        }
        int count=M;    //set1에 요소들을 set2에 비교
        for(int i:set1) {
        	if(set2.contains(i)) {
        		count--;
        	}
        }
        int count2=N;
        for(int i:set2) {
        	if(set1.contains(i)) {
        		count2--;
        	}
        }
        bw.write(String.valueOf(count+count2));
        bw.flush();
        bw.close();
        br.close();
    }
}

2)그냥 교집합 갯수만 구해도 풀림 ;;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st=new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        HashSet<Integer> set1=new HashSet<Integer>();
        HashSet<Integer> set2=new HashSet<Integer>();
        st=new StringTokenizer(br.readLine());
        for(int i=0;i<N;i++) {
        	int a=Integer.parseInt(st.nextToken());
        	set1.add(a);
        }
        st=new StringTokenizer(br.readLine());
        for(int i=0;i<M;i++) {
        	int a=Integer.parseInt(st.nextToken());
        	set2.add(a);
        }
        int count = 0;
        for (int i : set1) {
            if (set2.contains(i)) {
               count++;
            }
        }
        
        // 대칭 차집합의 크기 계산
        int result = (N - count) + (M - count);
        bw.write(String.valueOf(result));
        bw.flush();
        bw.close();
        br.close();
    }
}

8.문자열 S가 주어졌을 때, S의 서로 다른 부분 문자열의 개수를 구하는 프로그램을 작성하시오.
부분 문자열은 S에서 연속된 일부분을 말하며, 길이가 1보다 크거나 같아야 한다.
예를 들어, ababc의 부분 문자열은 a, b, a, b, c, ab, ba, ab, bc, aba, bab, abc, abab, babc, ababc가 있고, 서로 다른것의 개수는 12개이다.

입력
첫째 줄에 문자열 S가 주어진다. S는 알파벳 소문자로만 이루어져 있고, 길이는 1,000 이하이다.

출력
첫째 줄에 S의 서로 다른 부분 문자열의 개수를 출력한다.

1)시간초과
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        String S=br.readLine();
        HashSet<String> set=new HashSet<String>();
        for(int i=1;i<=S.length();i++) {
        	for(int j=0;j<=S.length()-i;j++) {
        		String result="";
        		for(int k=0;k<i;k++) {
        			result += String.valueOf(S.charAt(j+k)) ;
        		}
        		set.add(result);
        	}
        }
        bw.write(String.valueOf(set.size()));
        bw.flush();
        bw.close();
        br.close();
    }
}

2)위의 방법은 크기가 1인애들 이후 2인애들 3인애들 이렇게 넣었다면(크기가 1인애들 5개,2인애들 4개 이런식),
  이번에는 시작점부터 크기가 1~ 끝인 애들 넣고 다음번으로 넘어가는거(charAt(0)으로 시작하는애 5개 ,charAt(1)로 시작하는애 4개 이런식)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        String S=br.readLine();
        HashSet<String> set=new HashSet<String>();
        for(int i=0;i<S.length();i++) {
        	String result="";
        	for(int j=i;j<S.length();j++) {
        		result += String.valueOf(S.charAt(j));
        		set.add(result);
        	}
        }
        bw.write(String.valueOf(set.size()));
        bw.flush();
        bw.close();
        br.close();
    }
}
