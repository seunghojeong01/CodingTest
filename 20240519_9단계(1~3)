1.4 × 3 = 12이다.
이 식을 통해 다음과 같은 사실을 알 수 있다.
3은 12의 약수이고, 12는 3의 배수이다.
4도 12의 약수이고, 12는 4의 배수이다.
두 수가 주어졌을 때, 다음 3가지 중 어떤 관계인지 구하는 프로그램을 작성하시오.
첫 번째 숫자가 두 번째 숫자의 약수이다.
첫 번째 숫자가 두 번째 숫자의 배수이다.
첫 번째 숫자가 두 번째 숫자의 약수와 배수 모두 아니다.
각 테스트 케이스마다 첫 번째 숫자가 두 번째 숫자의 약수라면 factor를, 배수라면 multiple을, 둘 다 아니라면 neither를 출력한다.
 마지막 줄에는 0이 2개 주어진다. 두 수가 같은 경우는 없다.
1);;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		String line;
		int A;
		int B;
		while(!(line=br.readLine()).equals("0 0")) {
			StringTokenizer st=new StringTokenizer(line);
			A=Integer.parseInt(st.nextToken());	 //두번째수
			B=Integer.parseInt(st.nextToken());	 //두번째수
			if(A>=B) {
				int i=1;
				int k;
				while(true) {
					k=B*i;
					i++;
					if(A==k) {
						bw.write("multiple\n");
						break;
					}
					if(A<k) {
						bw.write("neither\n");
						break;
					}
				}
			}else {
				int i=1;
				int k;
				while(true) {
					k=A*i;
					i++;
					if(B==k) {
						bw.write("factor\n");
						break;
					}
					if(B<k) {
						bw.write("neither\n");
						break;
					}
				}
				
			}
			
		}	
		bw.flush();
		bw.close();
		br.close();
	}
}

2)이렇게 하면되는데...
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String line;
        while (!(line = br.readLine()).equals("0 0")) {
            StringTokenizer st = new StringTokenizer(line);
            int A = Integer.parseInt(st.nextToken()); // 첫 번째 수
            int B = Integer.parseInt(st.nextToken()); // 두 번째 수
            if (A % B == 0) {
                bw.write("multiple\n");
            } else if (B % A == 0) {
                bw.write("factor\n");
            } else {
                bw.write("neither\n");
            }
        }
        bw.flush();
        bw.close();
        br.close();
    }
}

2.어떤 자연수 p와 q가 있을 때, 만일 p를 q로 나누었을 때 나머지가 0이면 q는 p의 약수이다. 

6을 예로 들면

6 ÷ 1 = 6 … 0
6 ÷ 2 = 3 … 0
6 ÷ 3 = 2 … 0
6 ÷ 4 = 1 … 2
6 ÷ 5 = 1 … 1
6 ÷ 6 = 1 … 0
그래서 6의 약수는 1, 2, 3, 6, 총 네 개이다.
두 개의 자연수 N과 K가 주어졌을 때, N의 약수들 중 K번째로 작은 수를 출력하는 프로그램을 작성하시오.
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st=new StringTokenizer(br.readLine());
		int N=Integer.parseInt(st.nextToken());
		int k=Integer.parseInt(st.nextToken());
		int array[] = new int[N];
		int num=0;
		for(int i=1;i<=N;i++) {
			if(N%i==0) {
				array[num]=i;
				num++;
			}
		}
		bw.write(String.valueOf(array[k-1]));
		bw.flush();
		bw.close();
		br.close();
	}
}
3.어떤 숫자 n이 자신을 제외한 모든 약수들의 합과 같으면, 그 수를 완전수라고 한다.
예를 들어 6은 6 = 1 + 2 + 3 으로 완전수이다.
n이 완전수인지 아닌지 판단해주는 프로그램을 작성하라.
(테스트케이스 마다 한줄에 하나씩 출력해야 한다.
n이 완전수라면, n을 n이 아닌 약수들의 합으로 나타내어 출력한다(예제 출력 참고).
이때, 약수들은 오름차순으로 나열해야 한다.
n이 완전수가 아니라면 n is NOT perfect. 를 출력한다.)

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int n;
	
		while((n=Integer.parseInt(br.readLine()))!=-1) {
			String array[]=new String[2*n];
			int num=0;
			int sum=0;
			
			for(int i=1;i<n;i++) {
				if(n%i==0) {
					sum+=i;
					array[num]=String.valueOf(i);
					num++;
					array[num]=" + ";
					num++;
				}
			}
			
			if(n==sum) {
				bw.write(n+" = ");
				for(int i=0;i<num-1;i++) {
					bw.write(array[i]);
				}
				bw.newLine();
			}else {
				bw.write(n+" is NOT perfect.");
				bw.newLine();
			}
		}
	
		bw.flush();
		bw.close();
		br.close();
	}
}

2)개선된 코드, 배열 없앤코드드
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        while (true) {
            int n = Integer.parseInt(br.readLine());
            if (n == -1) break;

            StringBuilder result = new StringBuilder();
            int sum = 0;

            for (int i = 1; i < n; i++) {
                if (n % i == 0) {
                    sum += i;
                    if (result.length() > 0) {              //i보다 먼저 " + " 를 붙여서 뒤에 불필요한 요소를 없앤다.
                        result.append(" + ");
                    }
                    result.append(i);
                }
            }

            if (n == sum) {
                bw.write(n + " = " + result.toString());
            } else {
                bw.write(n + " is NOT perfect.");
            }
            bw.newLine();
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
