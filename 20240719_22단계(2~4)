2.자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열
고른 수열은 오름차순이어야 한다.
입력
첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

출력
한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.
수열은 사전 순으로 증가하는 순서로 출력해야 한다.
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	private static int N, M;
    private static int[] selected;
    private static BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer(br.readLine());
        N=Integer.parseInt(st.nextToken());
        M=Integer.parseInt(st.nextToken());
        selected=new int[M];
        backtrack(0);
        
        bw.flush();
        bw.close();
        br.close();      
    }
    public static void backtrack(int depth) throws IOException {
    	  if (depth == M) {
              printResult();
              return;
          }
          for (int i = 1; i <= N; i++) {
              if (isValid(depth, i)) {
                  selected[depth] = i;
                  backtrack(depth + 1);    //여기서 호출된 backtrack에서 true가 반환되어 printResult 실행
              }
          }
    }
    
    private static boolean isValid(int depth, int num) {
        for (int i = 0; i < depth; i++) {
            if (selected[i] >= num) {		//1번문제와 등호차이로 중복제거 가능
                return false;
            }
        }
        return true;
    }
    private static void printResult() throws IOException {
        for (int i = 0; i < M; i++) {
            bw.write(selected[i] + " ");
        }
        bw.write("\n");
    }
    
}

3.자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

1부터 N까지 자연수 중에서 M개를 고른 수열
같은 수를 여러 번 골라도 된다.
입력
첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)

출력
한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.
수열은 사전 순으로 증가하는 순서로 출력해야 한다.
(1번코드와 다른점-isValid메소드 없앰)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	private static int N, M;
    private static int[] selected;
    private static BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer(br.readLine());
        N=Integer.parseInt(st.nextToken());
        M=Integer.parseInt(st.nextToken());
        selected=new int[M];
        backtrack(0);
        
        bw.flush();
        bw.close();
        br.close();  
    }
    public static void backtrack(int depth) throws IOException {
    	  if (depth == M) {
              printResult();
              return;
          }

          for (int i = 1; i <= N; i++) { 
                  selected[depth] = i;
                  backtrack(depth + 1);    //여기서 호출된 backtrack에서 true가 반환되어 printResult 실행              
          }
    }
      
    private static void printResult() throws IOException {
        for (int i = 0; i < M; i++) {
            bw.write(selected[i] + " ");
        }
        bw.write("\n");
    }
    
}

4.자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

1부터 N까지 자연수 중에서 M개를 고른 수열
같은 수를 여러 번 골라도 된다.
고른 수열은 비내림차순이어야 한다.
길이가 K인 수열 A가 A1 ≤ A2 ≤ ... ≤ AK-1 ≤ AK를 만족하면, 비내림차순이라고 한다.
입력
첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

출력
한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.
수열은 사전 순으로 증가하는 순서로 출력해야 한다.
(isValid 재등장,부호변경)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	private static int N, M;
    private static int[] selected;
    private static BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer(br.readLine());
        N=Integer.parseInt(st.nextToken());
        M=Integer.parseInt(st.nextToken());
        selected=new int[M];
        backtrack(0);
        
        bw.flush();
        bw.close();
        br.close();        
    }
    public static void backtrack(int depth) throws IOException {
    	  if (depth == M) {
              printResult();
              return;
          }
          for (int i = 1; i <= N; i++) {
              if (isValid(depth, i)) {
                  selected[depth] = i;
                  backtrack(depth + 1);    //여기서 호출된 backtrack에서 true가 반환되어 printResult 실행
              }
          }
    }
    
    private static boolean isValid(int depth, int num) {
        for (int i = 0; i < depth; i++) {
            if (selected[i] > num) {		//1번문제와 등호차이로 중복제거 가능
                return false;
            }
        }
        return true;
    }
    private static void printResult() throws IOException {
        for (int i = 0; i < M; i++) {
            bw.write(selected[i] + " ");
        }
        bw.write("\n");
    }
    
}
