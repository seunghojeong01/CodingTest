8.2차원 평면 위의 점 N개가 주어진다. 좌표를 y좌표가 증가하는 순으로, y좌표가 같으면 x좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.
     
입력
첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.

출력
첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N=Integer.parseInt(br.readLine());
		int array[][]=new int[N][2];
		for(int i=0;i<N;i++) {
			StringTokenizer st=new StringTokenizer(br.readLine());
			int X=Integer.parseInt(st.nextToken());
			int Y=Integer.parseInt(st.nextToken());
			array[i][0]=X;
			array[i][1]=Y;
			
		}

		Arrays.sort(array,(a,b) -> {
			if(a[1]==b[1]) {
				return a[0]-b[0];
			}else {
				return a[1]-b[1];
			}
		});
		
		for(int arr[]:array) {
			bw.write(arr[0]+" "+arr[1]+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

9.알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.

길이가 짧은 것부터
길이가 같으면 사전 순으로
단, 중복된 단어는 하나만 남기고 제거해야 한다.

입력
첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 주어지는 문자열의 길이는 50을 넘지 않는다.

출력
조건에 따라 정렬하여 단어들을 출력한다.

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N = Integer.parseInt(br.readLine());
		String array[] = new String[N];
		for (int i = 0; i < N; i++) {
			array[i] = br.readLine();
		}
		
		//HashSet은 중복 요소를 허용하지 않는 자료구조, 배열을 HashSet으로 변환하여 중복을 제거할 수 있다.
		Set<String> set=new HashSet<String>(Arrays.asList(array));
		//여기서 new String[0] 0부분은 배열의 크기를 정하는데 0은 정하지 않겠다는 얘기-> 충분히 크게 만든다
		//만약 set보다 크게 지정한다면 남은 부분은 null이 채워지고 작다면 알아서 크기가 늘어나서 배열이 만들어짐
		String result[]=set.toArray(new String[0]);;
		//hashset을 쓰면 정렬이 풀림-> 중복제거 먼저하고 정렬해줘야됨
		
		Arrays.sort(result,(a,b)->{
			if(a.length()==b.length()) {
				int k=-1;
				for(int i=0;i<a.length();i++) {
					k=a.charAt(i)-b.charAt(i);
					if(k != 0) {
						break;
					}
				}
				return k;
			}else {
				return a.length()-b.length();
			}
		});
		
		for(String arr:result) {
			bw.write(arr+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

2)sort부분 간편화
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		//중복제거가 문제
		int N = Integer.parseInt(br.readLine());
		String array[] = new String[N];
		for (int i = 0; i < N; i++) {
			array[i] = br.readLine();
		}
		
		Set<String> set=new HashSet<String>(Arrays.asList(array));
		String result[]=set.toArray(new String[0]);;

		
		Arrays.sort(result, (a, b) -> {
		    if (a.length() != b.length()) {
		        return a.length() - b.length();
		    } else {
		        return a.compareTo(b);      //이렇게 비교해서 사전순으로 정렬가
		    }
		});
		
		for(String arr:result) {
			bw.write(arr+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

10.온라인 저지에 가입한 사람들의 나이와 이름이 가입한 순서대로 주어진다. 이때, 회원들을 나이가 증가하는 순으로, 나이가 같으면 먼저 가입한 사람이 앞에 오는 순서로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 온라인 저지 회원의 수 N이 주어진다. (1 ≤ N ≤ 100,000)
둘째 줄부터 N개의 줄에는 각 회원의 나이와 이름이 공백으로 구분되어 주어진다. 나이는 1보다 크거나 같으며, 200보다 작거나 같은 정수이고, 이름은 알파벳 대소문자로 이루어져 있고, 길이가 100보다 작거나 같은 문자열이다. 입력은 가입한 순서로 주어진다.

출력
첫째 줄부터 총 N개의 줄에 걸쳐 온라인 저지 회원을 나이 순, 나이가 같으면 가입한 순으로 한 줄에 한 명씩 나이와 이름을 공백으로 구분해 출력한다.

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		//중복제거가 문제
		int N = Integer.parseInt(br.readLine());
		ArrayList<String[]> array=new ArrayList<>();
		for(int i=0;i<N;i++) {
			StringTokenizer st=new StringTokenizer(br.readLine());
			String x=st.nextToken();
			String y=st.nextToken();
			String z=String.valueOf(i);
			array.add(new String[] {x,y,z});
		}
		
		Collections.sort(array,(a,b)->{
			if(!a[0].equals(b[0])) {
				return Integer.parseInt(a[0])-Integer.parseInt(b[0]);
			}else {
				return Integer.parseInt(a[2])-Integer.parseInt(b[2]);
			}
		});
    // arrayList.sort(Comparator.comparingInt((String[] a) -> Integer.parseInt(a[0]))
    //.thenComparingInt(a -> Integer.parseInt(a[2])));
		//다른 정렬 방법
  
		for(String[] arr:array) {
			bw.write(arr[0]+" "+arr[1]+"\n");
		}
		
		bw.flush();
		bw.close();
		br.close();
	}
}

11.수직선 위에 N개의 좌표 X1, X2, ..., XN이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.
Xi를 좌표 압축한 결과 X'i의 값은 Xi > Xj를 만족하는 서로 다른 좌표 Xj의 개수와 같아야 한다.
X1, X2, ..., XN에 좌표 압축을 적용한 결과 X'1, X'2, ..., X'N를 출력해보자.
//뭔말인지 모르겠는걸 ;; -> 중복제거한 후 그 값보다 작은 값들의 수 구하라는 듯?  
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main {
    static class Element implements Comparable<Element>{
        int val, index;
        public Element (int val, int index) {
            this.val = val;
            this.index = index;
        }
        @Override
        public int compareTo(Element o) {
            return Integer.compare(this.val, o.val);
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        Element[] el = new Element[N];
        
        for(int i = 0; i < N; i++){
            el[i] = new Element(Integer.parseInt(st.nextToken()), i);
        }

        Arrays.sort(el);
        
        int[] result = new int[N];
        HashMap<Integer, Integer> rankMap = new HashMap<>();
        int rank = 0;
        for(int i = 0; i < N; i++) {
            if (!rankMap.containsKey(el[i].val)) {
                rankMap.put(el[i].val, rank);
                rank++;
            }
            result[el[i].index] = rankMap.get(el[i].val); 
        }
        for(int re: result) {
            bw.write(re + " ");
        }
        bw.flush();
        bw.close();
        br.close();
    }
}
