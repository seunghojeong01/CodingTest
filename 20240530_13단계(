5.N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 10,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 10,000보다 작거나 같은 자연수이다.

출력
첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N = Integer.parseInt(br.readLine());
		int array[]=new int[N];
		for(int i=0;i<N;i++) {
			array[i]=Integer.parseInt(br.readLine());
		}
		Arrays.sort(array);
		
		for(int i=0;i<N;i++) {
			bw.write(array[i]+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

6.
배열을 정렬하는 것은 쉽다. 수가 주어지면, 그 수의 각 자리수를 내림차순으로 정렬해보자.

입력
첫째 줄에 정렬하려고 하는 수 N이 주어진다. N은 1,000,000,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 자리수를 내림차순으로 정렬한 수를 출력한다.
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		String N=br.readLine();
		int array[]=new int[N.length()];
		for(int i=0;i<N.length();i++) {
			array[i]=N.charAt(i)-'0';
		}
		Arrays.sort(array);
		for(int i=array.length-1;i>=0;i--) {
			bw.write(String.valueOf(array[i]));
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

7.2차원 평면 위의 점 N개가 주어진다. 좌표를 x좌표가 증가하는 순으로, x좌표가 같으면 y좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다.

출력
첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.

1) 시간초과 나옴 , 시간제한 1초
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N=Integer.parseInt(br.readLine());
		int array[][]=new int[N][2];
		for(int i=0;i<N;i++) {
			StringTokenizer st=new StringTokenizer(br.readLine());
			int X=Integer.parseInt(st.nextToken());
			int Y=Integer.parseInt(st.nextToken());
			array[i][0]=X;
			array[i][1]=Y;
			
		}

		for(int i=0;i<N-1;i++) {
			for(int j=i+1;j<N;j++) {
				if(array[i][0]>array[j][0] || ((array[i][0]==array[j][0]) && (array[i][1]>array[j][1]))) {
					int tempX=array[i][0];
					int tempY=array[i][1];
					array[i][0]=array[j][0];
					array[i][1]=array[j][1];
					array[j][0]=tempX;
					array[j][1]=tempY;
				}
			}
		}
		
		for(int arr[]:array) {
			bw.write(arr[0]+" "+arr[1]+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}

2)이중배열일때 Arrays.sort 쓰는법
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N=Integer.parseInt(br.readLine());
		int array[][]=new int[N][2];
		for(int i=0;i<N;i++) {
			StringTokenizer st=new StringTokenizer(br.readLine());
			int X=Integer.parseInt(st.nextToken());
			int Y=Integer.parseInt(st.nextToken());
			array[i][0]=X;
			array[i][1]=Y;
			
		}

		Arrays.sort(array,(a,b) -> {
			if(a[0]==b[0]) {
				return a[1]-b[1];   //-->오름차순이기에 음수가 나올시 앞에 배치됨 
			}else {
				return a[0]-b[0];
			}
		});
		
		for(int arr[]:array) {
			bw.write(arr[0]+" "+arr[1]+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}
3)ArrayList
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());
        List<int[]> list = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int X = Integer.parseInt(st.nextToken());
            int Y = Integer.parseInt(st.nextToken());
            list.add(new int[]{X, Y});
        }

        // Collections.sort 사용하여 리스트 정렬
        Collections.sort(list, (a, b) -> {
            if (a[0] == b[0]) {
                return Integer.compare(a[1], b[1]);  //-->a[1]-b[1] 가능 
            } else {
                return Integer.compare(a[0], b[0]);
            }
        });

        for (int[] arr : list) {
            bw.write(arr[0] + " " + arr[1] + "\n");
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
