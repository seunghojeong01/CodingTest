1.이분탐색은 일단 정렬되어있어야됨.
public class BinarySearch {
    // 이분 탐색 함수
    static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2; // 중간 위치 계산
            
            // 타겟 값을 찾은 경우
            if (arr[mid] == target) {
                return mid; // 찾은 위치 반환
            }
            
            // 중간점의 값보다 타겟 값이 작은 경우 왼쪽 탐색
            if (arr[mid] > target) {
                right = mid - 1;
            }
            // 중간점의 값보다 타겟 값이 큰 경우 오른쪽 탐색
            else {
                left = mid + 1;
            }
        }
        
        // 타겟 값을 찾지 못한 경우
        return -1;
    }
    
    public static void main(String[] args) {
        int[] arr = {2, 3, 4, 10, 40}; // 정렬된 배열
        int target = 10; // 찾고자 하는 값
        int result = binarySearch(arr, target); // 이분 탐색 실행
        
        if (result == -1) {
            System.out.println("원소를 찾을 수 없습니다.");
        } else {
            System.out.println("원소가 발견된 위치: " + result);
        }
    }
}

2. HaspMap
-키와 값의 쌍을 저장하며, 순서는 보장되지 않는다.  시간 복잡도가 평균적으로 O(1)
TreeMap
-TreeMap은 키가 정렬된 상태로 저장되는 Map의 구현체. 내부적으로 레드-블랙 트리를 사용하여 요소를 저장. TreeMap은 키에 대한 정렬이 필요할 때 유용하며, 모든 연산의 시간 복잡도는 O(log n)
LinkedHashMap
-HashMap과 유사하지만, 삽입된 순서유지

