1.단어 S와 정수 i가 주어졌을 때, s의 i번째 글자를 출력하는 프로그램을 작성하시오.
import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
	
	String S=br.readLine();
	int i=Integer.parseInt(br.readLine());
	bw.write(S.charAt(i-1));
	bw.flush();
	bw.close();
	br.close();

 }
}

2.알파벳으로만 이루어진 단어를 입력받아, 그 길이를 출력하는 프로그램을 작성하시오.
import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
	
	String S=br.readLine();
	
	bw.write(String.valueOf(S.length()));
	bw.flush();
	bw.close();
	br.close();

 }
}

3.문자열을 입력으로 주면 문자열의 첫 글자와 마지막 글자를 출력하는 프로그램을 작성하시오.
입력의 첫 줄에는 테스트 케이스의 개수 T(1 ≤ T ≤ 10)가 주어진다. 각 테스트 케이스는 한 줄에 하나의 문자열이 주어진다. 
문자열은 알파벳 A~Z 대문자로 이루어지며 알파벳 사이에 공백은 없으며 문자열의 길이는 1000보다 작다.

import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
	int T=Integer.parseInt(br.readLine());
	for(int i=0;i<T;i++) {
		
	String S=br.readLine();
	bw.write(S.charAt(0)+""+S.charAt(S.length()-1)+"\n");
	}
	
	bw.flush();
	bw.close();
	br.close();

 }
}
4.알파벳 소문자, 대문자, 숫자 0-9중 하나가 주어졌을 때, 주어진 글자의 아스키 코드값을 출력하는 프로그램을 작성하시오.
import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
	char T=br.readLine().charAt(0);
	
	bw.write(String.valueOf(T+0));
	bw.flush();
	bw.close();
	br.close();

 }
}

5.N개의 숫자가 공백 없이 쓰여있다. 이 숫자를 모두 합해서 출력하는 프로그램을 작성하시오.
import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

	int N=Integer.parseInt(br.readLine());
	String S=br.readLine();
	int sum=0;
	for(int i=0;i<N;i++) {
		/* sum+= Integer.parseInt(String.valueOf(S.charAt(i))); */
		sum +=S.charAt(i)-48;  //자연수 1이  아스키코드값 49에 해당한다고함
	}
	
	bw.write(String.valueOf(sum));
	bw.flush();
	bw.close();
	br.close();

 }
}

6.알파벳 소문자로만 이루어진 단어 S가 주어진다. 각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.
1)첫번째 풀이
import java.io.*;
import java.util.StringTokenizer;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

	String S=br.readLine();
	// 각 알파벳의 처음 등장하는 위치를 저장할 배열 초기화
    // 모든 알파벳을 -1로 초기화하여 알파벳이 포함되어 있지 않은 경우 -1로 출력되게 함
    int[] array = new int[26];
    for (int i = 0; i < 26; i++) {
       array[i] = -1;
    }

    // 문자열 S를 순회하며 각 알파벳의 위치를 기록
    for (int i = 0; i < S.length(); i++) {
        char c= S.charAt(i);
        // 해당 알파벳이 처음 등장하는 경우에만 위치를 기록
        if (array[c - 'a'] == -1) {
            array[c - 'a'] = i;
        }
    }

    // 결과 출력
    for (int i : array) {
        bw.write(i+ " ");
    }


	bw.flush();
	bw.close();
	br.close();

 }
}

2)두번째 풀이
import java.io.*;
public class Main {

	public static void main(String[] args) throws IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

	String S=br.readLine();
	for(char j='a';j<='z';j++) {
		boolean b=false;
		for(int i=0;i<S.length();i++) {
			if(j==S.charAt(i)) {
				bw.write(i+" ");
				b=true;
				break;  //처음 등장하는 위치를 찾으면 빠져나오기
			}
		}
		if(!b){
			bw.write(-1+" ");
		}
	}
	bw.flush();
	bw.close();
	br.close();

 }
}

